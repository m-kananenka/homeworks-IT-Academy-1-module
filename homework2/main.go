package main

import "fmt"

func main() {

	// 1.Составить логические выражения, демонстрирующие свойства логических операций.
	a := false
	b := true
	c := true

	//Переместительный (коммутативный) закон.Логическое сложение
	fmt.Printf("%v\n", (a || b) == (b || a)) //true
	//Переместительный (коммутативный) закон.Логическое умножение
	fmt.Printf("%v\n", (a && b) == (b && a)) //true
	////Сочетательный (ассоциативный) закон.Логическое умножение
	fmt.Printf("%v\n", ((a && b) && c) == (a && (b && c))) //true
	////Сочетательный (ассоциативный) закон.Логическое сложение
	fmt.Printf("%v\n", ((a || b) || c) == (a || (b || c))) //true
	//// Закон двойного отрицания.
	fmt.Printf("%v\n", !!a == a) //true
	////Распределительный (дистрибутивный) закон.Логическое умножение
	fmt.Printf("%v\n", (a && (b || c)) == ((a && b) || (a && c))) //true
	////Законы исключения третьего.Логическое сложение.
	fmt.Printf("%v\n", (a || a) == a) //true

	//2.Написать примеры переполнений для всех целочисленных типов.
	//uint
	var u1 uint8 = 255
	u1++
	fmt.Println(u1) //0

	var u2 uint16 = 65535
	u2++
	fmt.Println(u2) //0

	var u3 uint32
	u3--
	fmt.Println(u3) //4294967295

	var u4 uint64
	u4--
	fmt.Println(u4) //18446744073709551615

	//int
	var i1 int8 = 127
	i1++
	fmt.Println(i1) //-128

	var i2 int16 = 32767
	i2++
	fmt.Println(i2) //-32768

	var i3 int32 = -2147483648
	i3--
	fmt.Println(i3) //2147483647

	var i4 int64 = -9223372036854775808
	i4--
	fmt.Println(i4) //9223372036854775807

	//3. Составить строки из 1, 2, 3 рун и 4, 5, 12 байт соответственно.
	s1 := "🌎"               // 1 rune - 4 bytes
	fmt.Println([]rune(s1)) //[127758]
	fmt.Println([]byte(s1)) // [240 159 140 142]

	s2 := "🌎a"              // 2 runes - 5 bytes
	fmt.Println([]rune(s2)) //[127758 97]
	fmt.Println([]byte(s2)) //[240 159 140 142 97]

	s3 := "🍿🍿🍿"             //3 runes - 12 bytes
	fmt.Println([]rune(s3)) // [127871 127871 127871]
	fmt.Println([]byte(s3)) //[240 159 141 191 240 159 141 191 240 159 141 191]

	//4. Привести свой пример потери точности с float32 и float64.
	var f float64
	f = 5.0
	fmt.Println(f+1e-16 == 5) // true

	var g float32
	g = 4.0
	fmt.Println(g+1e-7 == 4) // true

	//5.С помощью побитовых операций вывести 2, 4 и 7 бит из целого числа.
	var x uint = 16
	fmt.Printf("это двоичное представление х %b\n", x)
	fmt.Printf("%b\n", x>>3)   //10-2
	fmt.Printf("%b\n", x>>2)   //100-4
	fmt.Printf("%b\n", x>>1-1) //111-7
}
